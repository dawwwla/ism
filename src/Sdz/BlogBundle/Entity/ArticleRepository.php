<?php

namespace Sdz\BlogBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
  public function getSelectList()
  {
    $qb = $this->createQueryBuilder('a')
               ->where('a.publication = 1');

    return $qb;
  }

  public function getArticles($nombreParPage, $page)
  {
    if ((int) $page < 1) {
      throw new \InvalidArgumentException('L\'argument $page ne peut être inférieur à 1 (valeur : "'.$page.'").');
    }

    $query = $this->createQueryBuilder('a')
                  ->leftJoin('a.image', 'i')
                    ->addSelect('i')
                  ->leftJoin('a.categories', 'cat')
                    ->addSelect('cat')
                  ->leftJoin('a.articleCompetences', 'ac')
                    ->addSelect('ac')
                  ->leftJoin('ac.competence', 'c')
                    ->addSelect('c')
                  ->where('a.publication = 1')
                  ->orderBy('a.date', 'DESC')
                  ->getQuery();

    $query->setFirstResult(($page-1) * $nombreParPage)
          ->setMaxResults($nombreParPage);

    return new Paginator($query);
  }

  public function myFindAll()
  {
    return $this->createQueryBuilder('a')
                ->getQuery()
                ->getResult();
  }

  public function findByAuteurAndDate($auteur, $annee)
  {
    // On utilise le QueryBuilder créé par le repository directement pour gagner du temps
    // Plus besoin de faire le select() ni le from() par la suite donc
    $qb = $this->createQueryBuilder('a');

    $qb->where('a.auteur = :auteur')
        ->setParameter('auteur', $auteur)
       ->andWhere('a.date < :annee')
        ->setParameter('annee', $annee)
       ->orderBy('a.date', 'DESC');

    return $qb->getQuery()
              ->getResult();
  }

  public function whereCurrentYear(\Doctrine\ORM\QueryBuilder $qb)
  {
    $qb->andWhere('a.date BETWEEN :debut AND :fin')
        ->setParameter('debut', new \Datetime(date('Y').'-01-01'))  // Date entre le 1er janvier de cette année
        ->setParameter('fin',   new \Datetime(date('Y').'-12-31')); // Et le 31 décembre de cette année

      return $qb;
  }

  public function myFind()
  {
    $qb = $this->createQueryBuilder('a');

    // On peut ajouter ce qu'on veut avant
    $qb->where('a.user_id = :user')
        ->setParameter('user', 1);

    // On applique notre condition
    $qb = $this->whereCurrentYear($qb);

    // On peut ajouter ce qu'on veut après
    $qb->orderBy('a.date', 'DESC');

    return $qb->getQuery()
              ->getResult();
  }
}
